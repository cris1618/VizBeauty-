{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to vizbeauty","text":"<p>VizBeauty is a Python package for beautiful and insightful visualizations, including descriptive statistics, bar plots, regression scatter plots, and hyperparameter tuning visualizations for machine learning models.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://cris1618.github.io/vizbeauty</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#vizbeauty.common.pearson_correlation","title":"<code>pearson_correlation(x, y)</code>","text":"<p>Compute the Pearson correlation coefficient for two variables and determine if there is a statistically significant correlation.</p> <ul> <li>x (Series): First variable for correlation.</li> <li>y (Series): Second variable for correlation.</li> </ul> <ul> <li>None</li> </ul> Source code in <code>vizbeauty/common.py</code> <pre><code>def pearson_correlation(x, y):\n    \"\"\"\n    Compute the Pearson correlation coefficient for two variables and determine if there is a statistically significant correlation.\n\n    Parameters:\n    - x (Series): First variable for correlation.\n    - y (Series): Second variable for correlation.\n\n    Returns:\n    - None\n    \"\"\"\n    correlation_coefficient, p_value = pearsonr(x, y)\n    alpha = 0.05\n\n    print(\"Pearson Correlation Coefficient:\", correlation_coefficient)\n    print(\"P-value:\", p_value)\n\n    if p_value &lt; alpha:\n        print(f\"There is a statistically significant correlation between {x.name} and {y.name}.\")\n    else:\n        print(f\"There is no statistically significant correlation between {x.name} and {y.name}.\")\n</code></pre>"},{"location":"common/#vizbeauty.common.print_statistic","title":"<code>print_statistic(title, variable)</code>","text":"<p>Prints descriptive statistics for a given variable.</p> <ul> <li>title (str): Title or label for the variable.</li> <li>variable (Series): Pandas Series containing the variable data.</li> </ul> <ul> <li>None</li> </ul> Source code in <code>vizbeauty/common.py</code> <pre><code>def print_statistic(title, variable):\n    \"\"\"\n    Prints descriptive statistics for a given variable.\n\n    Parameters:\n    - title (str): Title or label for the variable.\n    - variable (Series): Pandas Series containing the variable data.\n\n    Returns:\n    - None\n    \"\"\"\n    print(f\"Statistics for {title}:\")\n    print(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\n    print(f\"Mean: {round(variable.mean(), 2)}\")\n    print(f\"Median: {round(variable.median(), 2)}\")\n    print(f\"Standard Deviation: {round(variable.std(), 2)}\")\n    print(f\"Minimum: {round(variable.min(), 2)}\")\n    print(f\"Maximum: {round(variable.max(), 2)}\")\n    print(f\"25th Percentile (Q1): {round(np.percentile(variable, 25), 2)}\")\n    print(f\"75th Percentile (Q3): {round(np.percentile(variable, 75), 2)}\")\n    print(f\"Skewness: {round(variable.skew(), 2)}\")\n    print(f\"Kurtosis: {round(variable.kurtosis(), 2)}\")\n    print(f\"Count of Missing Values: {variable.isnull().sum()}\")\n    print(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\n    print()\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/cris1618/vizbeauty/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>VizBeauty could always use more documentation, whether as part of the official VizBeauty docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/cris1618/vizbeauty/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up vizbeauty for local development.</p> <ol> <li> <p>Fork the vizbeauty repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/vizbeauty.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv vizbeauty\n$ cd vizbeauty/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 vizbeauty tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/cris1618/vizbeauty/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install VizBeauty, run this command in your terminal:</p> <pre><code>pip install vizbeauty\n</code></pre> <p>This is the preferred method to install VizBeauty, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install VizBeauty from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/cris1618/vizbeauty\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use VizBeauty in a project:</p> <pre><code>import vizbeauty\n</code></pre>"},{"location":"vizbeauty/","title":"vizbeauty module","text":"<p>Main module.</p>"},{"location":"vizbeauty/#vizbeauty.vizbeauty.beautybar","title":"<code>beautybar(x, y, data, data_avg, color='skyblue', ax=None)</code>","text":"<p>Create a bar plot with annotations for each bar and a horizontal line indicating the general average value of the variable plotted on the y-axis.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>The name of the variable to be plotted on the x-axis.</p> required <code>y</code> <code>str</code> <p>The name of the variable to be plotted on the y-axis.</p> required <code>data</code> <code>DataFrame</code> <p>The dataframe containing the data to be plotted.</p> required <code>data_avg</code> <code>DataFrame</code> <p>The dataframe containing the average values for the y variable.</p> required <code>color</code> <code>str</code> <p>The color of the bars. Defaults to \"skyblue\".</p> <code>'skyblue'</code> <code>ax</code> <code>matplotlib.axes.Axes</code> <p>The axes to plot on. If not provided, a new figure will be created.</p> <code>None</code> Source code in <code>vizbeauty/vizbeauty.py</code> <pre><code>def beautybar(x, y, data, data_avg, color=\"skyblue\", ax=None):\n    \"\"\"\n    Create a bar plot with annotations for each bar and a horizontal line indicating the general average value\n    of the variable plotted on the y-axis.\n\n    Parameters:\n        x (str): The name of the variable to be plotted on the x-axis.\n        y (str): The name of the variable to be plotted on the y-axis.\n        data (DataFrame): The dataframe containing the data to be plotted.\n        data_avg (DataFrame): The dataframe containing the average values for the y variable.\n        color (str, optional): The color of the bars. Defaults to \"skyblue\".\n        ax (matplotlib.axes.Axes, optional): The axes to plot on. If not provided, a new figure will be created.\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n\n    sns.barplot(x=x, y=y, data=data, color=color, ax=ax)\n\n    for index, value in enumerate(data[y]):\n        ax.text(index, value + 0.2, str(round(value, 2)), ha='center', va='bottom')\n\n    avg_variable = data_avg[y].mean()\n\n    ax.axhline(y=avg_variable, color='r', linestyle='--')\n    ax.text(9.5, avg_variable + 0.2, f'Average: {round(avg_variable, 2)}', color='red')\n\n    ax.set_xlabel(x)\n    ax.set_ylabel(y)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n    ax.grid(axis='y', linestyle='--')\n    plt.tight_layout()\n</code></pre>"},{"location":"vizbeauty/#vizbeauty.vizbeauty.reg_scatter","title":"<code>reg_scatter(x, y, data, hue=None, legend='auto', size=None, sizes=None, ax=None)</code>","text":"<p>Create a scatter plot with a regression line.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>The name of the variable to be plotted on the x-axis.</p> required <code>y</code> <code>str</code> <p>The name of the variable to be plotted on the y-axis.</p> required <code>data</code> <code>DataFrame</code> <p>The dataframe containing the data to be plotted.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>legend</code> <code>{\"auto\", \"brief\", \"full\"}</code> <p>How to draw the legend. Defaults to \"auto\".</p> <code>'auto'</code> <code>size</code> <code>str</code> <p>Grouping variable that will produce points with different sizes.</p> <code>None</code> <code>sizes</code> <code>tuple</code> <p>Tuple of minimum and maximum size values to scale the size variable.</p> <code>None</code> <code>ax</code> <code>matplotlib axes</code> <p>Axes object to draw the plot onto.</p> <code>None</code> Source code in <code>vizbeauty/vizbeauty.py</code> <pre><code>def reg_scatter(x, y, data, hue=None, legend=\"auto\", size=None, sizes=None, ax=None):\n    \"\"\"\n    Create a scatter plot with a regression line.\n\n    Parameters:\n        x (str): The name of the variable to be plotted on the x-axis.\n        y (str): The name of the variable to be plotted on the y-axis.\n        data (DataFrame): The dataframe containing the data to be plotted.\n        hue (str, optional): Variable in data to map plot aspects to different colors.\n        legend ({\"auto\", \"brief\", \"full\"}, optional): How to draw the legend. Defaults to \"auto\".\n        size (str, optional): Grouping variable that will produce points with different sizes.\n        sizes (tuple, optional): Tuple of minimum and maximum size values to scale the size variable.\n        ax (matplotlib axes, optional): Axes object to draw the plot onto.\n    \"\"\"\n    sns.scatterplot(x=x, y=y, data=data, ax=ax, hue=hue, legend=legend, size=size, sizes=sizes)\n    sns.regplot(x=x, y=y, data=data, ax=ax, scatter=False, ci=None, line_kws={\"color\": \"black\"})\n</code></pre>"},{"location":"vizbeauty/#vizbeauty.vizbeauty.visualize_hyperparameter","title":"<code>visualize_hyperparameter(param_name, param_values, scores)</code>","text":"<p>Visualize the effect of a hyperparameter on model performance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>Name of the hyperparameter.</p> required <code>param_values</code> <code>list</code> <p>List of values for the hyperparameter.</p> required <code>scores</code> <code>list</code> <p>List of mean squared error scores corresponding to each hyperparameter value.</p> required Source code in <code>vizbeauty/vizbeauty.py</code> <pre><code>def visualize_hyperparameter(param_name, param_values, scores):\n    \"\"\"\n    Visualize the effect of a hyperparameter on model performance.\n\n    Parameters:\n        param_name (str): Name of the hyperparameter.\n        param_values (list): List of values for the hyperparameter.\n        scores (list): List of mean squared error scores corresponding to each hyperparameter value.\n    \"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.scatter(param_values, scores, marker='o')\n    plt.title(f\"Effect of {param_name} on Model Performance\")\n    plt.xlabel(param_name)\n    plt.ylabel(\"Mean Squared Error\")\n    plt.grid(True)\n    plt.show()\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}